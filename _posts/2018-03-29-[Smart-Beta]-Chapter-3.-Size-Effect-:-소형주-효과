---
bg: "tools.jpg"
layout: post
title:  "[Smart Beta] Chapter 3. Size Effect - 소형주 효과"
crawlertitle: "[Smart Beta] Size Effect"
summary: "소형주 효과와 Fama-French의 3-Factor model"
date:   2018-03-29 20:09:47 +0700
categories: posts
tags: ['Smart-Beta']
author: KHU-FE
---



# 소형주 효과(Size Effect)

### 소형주 효과의 발견과 의미
Rolf W. Banz의 1981년 "The Relationship Between Market Value and Return of Common Stocks"<br />
해당 논문을 통해 1926년-1980년 기간 중 NYSE에 상장된 종목들을 시가총액가중 기준으로 분류하여 수익률과 리스크를 측정한 결과, 시가총액이 큰 종목이 작은 종목의 리스크 대비 초과수익률이 존재한다.
<br /><br />
이는 효율적 시장가설(Efficient Mkt Theory)에 반하는 실증적 발견으로 시장의 Anomaly 중 하나로 연구되기 시작함.
<br /><br />
Fama-French의 3 Factor model에서도 Size Effect와 B/M은 시장의 체계적인 리스크(Systemical Risk)로 설명되지 않는 Factor로 바라봄.


# 각 지역별 SMB 팩터 누적 수익률(1990.7-2018.1)

## 데이터 불러오기 및 데이터 확인하기

* pandas는 표 형식의 자료를 DataFrame 객체로 읽어오는 기능을 제공한다.
   
    1. pandas의 read_excel 함수를 이용하여 데이터를 불러온다.
    2. 불러온 데이터의 값을 확인하기 위해 데이터객체명.head() 혹은 .tail()을 이용하여 불러온 데이터를 확인한다.


```python
import pandas as pd
import numpy as np
```


```python
df = pd.read_excel('smb_cumreturn_data.xlsx', index_col = 0)
df.index = pd.to_datetime(df.index, format = '%Y%m')

print(df.head())
```

                Global  Global ex US  Europe  Japan  Asia ex Japan
    1990-07-01    0.77          2.77    0.48   6.01          -2.98
    1990-08-01   -1.60         -0.92   -0.12  -4.98           2.99
    1990-09-01    1.23          3.21    1.75   0.75           4.12
    1990-10-01   -7.39         -8.98   -2.76   1.23          -5.04
    1990-11-01    1.22          1.17   -2.75  -5.48          -1.62
    

## 데이터 연산하기
### 누적수익률 구하기

1. DataFrame의 각 열(지역구분)에 담겨있는 월별 수익률의 누적수익률을 구한다. 객체명.cumprod() 함수를 이용하면 쉽게 구할 수 있다.
2. cumprod() 함수의 결과 타입이 Series 이므로 이를 DataFrame 타입으로 변환해준다.
3. 계산한 데이터의 값들을 확인한다.


```python
df1 = (1 + df['Global']/100).cumprod() -1
df2 = (1 + df['Global ex US']/100).cumprod() -1 
df3 = (1 + df['Europe']/100).cumprod() -1
df4 = (1 + df['Japan']/100).cumprod() -1
df5 = (1 + df['Asia ex Japan']/100).cumprod() -1
df6 = df1 - df2

frame = pd.Series.to_frame(df1)
frame['Global ex Us'] = df2
frame['Europe'] = df3
frame['Japan'] = df4
frame['Asia ex Japan'] = df5
frame['US'] = df6

frame.tail()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Global</th>
      <th>Global ex Us</th>
      <th>Europe</th>
      <th>Japan</th>
      <th>Asia ex Japan</th>
      <th>US</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2017-10-01</th>
      <td>0.048795</td>
      <td>0.068222</td>
      <td>-0.065510</td>
      <td>0.040166</td>
      <td>-0.599847</td>
      <td>-0.019427</td>
    </tr>
    <tr>
      <th>2017-11-01</th>
      <td>0.041663</td>
      <td>0.068435</td>
      <td>-0.069248</td>
      <td>0.040686</td>
      <td>-0.606610</td>
      <td>-0.026772</td>
    </tr>
    <tr>
      <th>2017-12-01</th>
      <td>0.051455</td>
      <td>0.087453</td>
      <td>-0.054635</td>
      <td>0.061396</td>
      <td>-0.602636</td>
      <td>-0.035999</td>
    </tr>
    <tr>
      <th>2018-01-01</th>
      <td>0.040204</td>
      <td>0.089193</td>
      <td>-0.047072</td>
      <td>0.078484</td>
      <td>-0.609431</td>
      <td>-0.048989</td>
    </tr>
    <tr>
      <th>2018-02-01</th>
      <td>0.048630</td>
      <td>0.103135</td>
      <td>-0.035446</td>
      <td>0.089700</td>
      <td>-0.611111</td>
      <td>-0.054505</td>
    </tr>
  </tbody>
</table>
</div>


